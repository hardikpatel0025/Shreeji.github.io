@page "/clients"
@* <MatToastContainer /> *@
<PageTitle>Clients</PageTitle>

@if (objClients == null)
{
    @* <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Large" /> *@
}
else
{
    <div class="page-header">
        <h1>Clients</h1>
        <div class="input-group client-search">
            <div class="form-inline">
                <input type="search" style="width:100%;"
                       id="form1"
                       class="form-control"
                       placeholder="Search by name"
                       @bind-value="SearchTerm"
                       @bind-value:event="oninput" />
                <i class="fas fa-search" aria-hidden="true"></i>
            </div>
        </div>
        <NavLink class="nav-link" href="addClient">
            <button type="button" class="bi bi-plus-circle-fill btn btn-primary" aria-hidden="true" style="margin-right:10px"> Add new</button>
        </NavLink>
    </div>

    @if (objClients.Count > 0)
    {
        <div class="table-responsive">
            <table style="width:100%" class="table table-striped table table-bordered">
                <thead>
                    <tr>
                        @* <th>Client ID</th> *@
                        <th>Photo</th>
                        <th>Name</th>
                        <th>Phone number</th>
                        <th>Email</th>
                        <th>Address</th>
                        <th>PIN</th>
                        <th>Bar code</th>
                        <th>Inserted date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in filteredClients)
                    {
                        if (client.User_type != 0)
                        {
                            <tr>
                                @* <td>@client.Client_id</td> *@
                                <td>
                                    @if (client.Photo == null)
                                    {
                                        <img alt="client-photo" class="table__client-photo placeholder" />
                                    }
                                    else
                                    {
                                        <img alt="client-photo" class="table__client-photo" src="data:image/png;base64,@(Convert.ToBase64String(client.Photo))" />
                                    }
                                </td>
                                <td>@client.Name</td>
                                <td>@client.Phone_number</td>
                                <td>@client.Email</td>
                                <td>@client.Address</td>
                                <td>@client.PIN</td>
                                <td>@client.Bar_code</td>
                                <td>@client.Inserted_date</td>
                                <td>
                                    <a class="nav-link" href="addClientMembership/@client.Client_id/@client.Bar_code">
                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                    </a>
                                </td>
                                <td>
                                    <a class="nav-link" href="editClient/@client.Client_id">
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                </td>
                                <td>
                                    <a class="nav-link" href="deleteClient/@client.Client_id">
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <h3>There are no clients yet.</h3>
    }

}
@* @if (_Clientfilter == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentSearch ref=searchTest
        @bind-bind-Value="SearchTerm"
        @bind-bind-Value:event="oninput"
        Placeholder="Search By Name"
        Style="margin-bottom:5px;" />
    <FluentButton Href="addClient" IconStart="@(new Icons.Regular.Size16.AddSquare())" Appearance="Appearance.Accent">Add New</FluentButton>

    <FluentDesignTheme Mode="DesignThemeModes.Dark" OfficeColor="OfficeColor.PowerApps" />
    <FluentDataGrid Id="weathergrid" Pagination=@pagination Items=@_Clientfilter GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem=ClientModel>
        <TemplateColumn Tooltip="true" Title="Photo" Align="Align.Center">
            <img src="data:image/png;base64,@(Convert.ToBase64String(context.Photo))"  alt="client-photo" />
        </TemplateColumn>

        <PropertyColumn Title="Name" Property="@(c => c!.Name)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Phone" Property="@(c => c!.Phone_number)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Email" Property="@(c => c!.Email)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Address" Property="@(c => c!.Address)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="PIN" Property="@(c => c!.PIN)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Bar Code" Property="@(c => c!.Bar_code)" Sortable="true" Align="Align.Center" />
        <PropertyColumn Title="Inserted Date" Property="@(c => c!.Inserted_date)" Sortable="true" Align="Align.Center" />
    </FluentDataGrid>
    <FluentPaginator State="@pagination">
        <SummaryTemplate>
            There are <strong>@(pagination.TotalItemCount ?? 0)</strong> rows
        </SummaryTemplate>
        <PaginationTextTemplate>
            This is page <strong>@(pagination.CurrentPageIndex + 1)</strong> out of a total of <strong>@(pagination.LastPageIndex + 1)</strong> pages
        </PaginationTextTemplate>
    </FluentPaginator>
} *@
@code {
    List<ClientModel> objClients;
    List<ClientModel> filteredClients = new List<ClientModel>();
    IQueryable<ClientModel>? _Clientfilter;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    FluentSearch? searchTest;
    private string searchTerm { get; set; } = "";
    public String SearchTerm
    {
        get
        {
            return searchTerm;
        }

        set
        {
            searchTerm = value;
            filteredClients = objClients.Where(c => c.Name.ToLower().Contains(value.ToLower())).ToList();
            _Clientfilter = filteredClients.AsQueryable();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        objClients = await Task.Run(() => objClientService.GetClients());
        filteredClients = objClients;
        _Clientfilter = objClients.AsQueryable();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     int loggedIn = await sessionStorage.GetItemAsync<int>("loggedIn");
    //     if (loggedIn == 0)
    //     {
    //         NavigationManager.NavigateTo("login");
    //     }

    //     int userType = await sessionStorage.GetItemAsync<int>("userType");
    //     if (userType != 0)
    //     {
    //         NavigationManager.NavigateTo("clients-notFound");
    //     }
    // }
    // private void ShowToast(MatToastType type, string toastTitle, string toastMessage, string icon = "")
    // {
    //     _toaster.Add(toastMessage, type, toastTitle, icon, config =>
    //     {
    //         config.ShowCloseButton = true;
    //         config.ShowProgressBar = true;
    //         config.MaximumOpacity = 500;
    //         config.ShowTransitionDuration = 10000;
    //     });
    // }
}
