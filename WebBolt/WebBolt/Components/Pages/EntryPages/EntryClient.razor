@page "/clientEntry"
<MatToastContainer />
@if (isPageLoading)
{
    <div class="loader"></div>
}
else
{
    <h1>Entry Client</h1>

    <form>
        <div style="border-bottom: 1px solid #d6d5d5;padding: 20px;">
            <div style="display:flex;align-items:center;justify-content:space-between;width:50%;">
                <div for="bar-code" class="control-label " style="font-size:24px;font-weight:700;margin-right:70px;">Card number:</div>
                <input form="bar-code" type="text" @bind="@bar_code" class="form-control" style="margin-right:10px;" />
                <input type="button" class="btn btn-primary" value="Get client memberships" @onclick="@getClientMemberships" />
                @if (isLoading)
                {
                    <div class="loader"></div>
                }
            </div>
        </div>
        @if (dataLoaded)
        {
            <div style="border-bottom: 1px solid #d6d5d5;padding: 20px;">
                <div style="font-size:24px;font-weight:700;">Name: <p style="font-size:18px;color:#8f7578;font-weight:normal;">@client.Name</p></div>
                @if (clientMemberships.Count > 0)
                {
                    <div style="display:flex;align-items:baseline;">
                        <div for="memberships" class="control-label" style="margin-right: 10px;
        margin-bottom: 10px;
        font-size: 24px;
        font-weight: 700;
            ">
                            Client's memberships:
                        </div>
                        <select @bind="@selectedClientMembershipId">
                            @foreach (var memShip in clientMemberships)
                            {
                                Membership currentmemship = getMembershipByClientMemshipId(memShip.Client_Membership_Id);
                                <option value="@memShip.Client_Membership_Id">@currentmemship.Name</option>
                            }
                        </select>
                    </div>
                }
                else
                {
                    <h2>This user does not have any membership.</h2>
                }
            </div>
            @if (clientMemberships.Count > 0)
            {
                ClientMembership selectedClientMemship = clientMemberships.FirstOrDefault(cm => cm.Client_Membership_Id == selectedClientMembershipId);
                Membership selectedMemShip = getMembershipByClientMemshipId(SelectedClientMembershipId);
                <div style="width:100%;display:flex;">
                    <div style="padding: 20px;">
                        <div style="font-size:24px;font-weight:700;">Membership name: <p style="font-size:18px;color:#8f7578;font-weight:normal;">@selectedMemShip.Name</p></div>
                        @if (isFirstUsage)
                        {
                            <div>This membership has not been used yet.</div>
                        }
                        else
                        {
                            <div style="font-size:24px;font-weight:700;">First used at: <p style="font-size:18px;color:#8f7578;font-weight:normal;">@selectedClientMemship.First_Usage_Date</p></div>
                        }
                        <div style="font-size:24px;font-weight:700;">Available until: <p style="font-size:18px;color:#8f7578;font-weight:normal;">@availableUntil</p></div>
                        <div style="font-size:24px;font-weight:700;">Entries left: <p style="font-size:18px;color:#8f7578;font-weight:normal;">@entriesLeft</p></div>
                    </div>
                    <div style="color:red;font-size:40px;padding:10px 0 0 100px;">@errorText</div>
                </div>
                @if (canEntry)
                {
                    <input type="button" class="btn btn-primary" value="Entry" @onclick="@entryClient" />
                }
            }
        }
    </form>
}

@code {
    bool isPageLoading = true;
    bool isLoading = false;
    bool dataLoaded = false;
    String errorText = "";
    String availableUntil = "";

    ClientModel client = new ClientModel();
    List<ClientMembership> clientMemberships = new List<ClientMembership>();
    List<Membership> membershipTypes = new List<Membership>();
    private int SelectedClientMembershipId;
    public int selectedClientMembershipId
    {
        get
        {
            return SelectedClientMembershipId;
        }

        set
        {
            SelectedClientMembershipId = value;
            changeView(value);
        }
    }

    String? bar_code;

    bool canEntry = true;
    bool isFirstUsage = false;
    String? entriesLeft;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        int loggedIn = await sessionStorage.GetItemAsync<int>("loggedIn");
        if (loggedIn == 0)
        {
            NavigationManager.NavigateTo("login");
        }

        int userType = await sessionStorage.GetItemAsync<int>("userType");
        if (userType != 0)
        {
            NavigationManager.NavigateTo("notAuthorized/entryClient");
            return;
        }
        isPageLoading = false;
        StateHasChanged();
    }

    public async void getClientMemberships()
    {
        isLoading = true;
        if (bar_code == null || string.IsNullOrWhiteSpace(bar_code))
        {
            ShowToast(MatToastType.Danger, "Error", "Please Enter a Valid Membership number.");
            isLoading = false;
            return;
        }
        bool isBarcodeValid = await Task.Run(() => objClientService.IsBarcodeValid(bar_code));

        if (!isBarcodeValid)
        {
            ShowToast(MatToastType.Danger, "Error", "Invalid barcode. Please check and try again.");
            isLoading = false;
            return;
        }
        client = await Task.Run(() => objClientService.GetClientByBarCode(bar_code));
        if (client == null)
        {
            ShowToast(MatToastType.Danger, "Error", $"Please Enter barcode.");
            isLoading = false;
            return;
        }


        clientMemberships = await Task.Run(() => clientMembershipService.GetClientMembershipsByBarCode(bar_code));
        membershipTypes = await Task.Run(() => membershipService.GetMemberships());

        if (clientMemberships.Count > 0)
        {
            selectedClientMembershipId = clientMemberships[0].Client_Membership_Id;
        }

        isLoading = false;
        dataLoaded = true;
    }

    public Membership getMembershipByClientMemshipId(int id)
    {
        ClientMembership clientMemship = clientMemberships.FirstOrDefault(cm => cm.Client_Membership_Id == id);
        int memshipId = clientMemship.Membership_Id;
        return membershipTypes.FirstOrDefault(m => m.Id == memshipId);
    }

    public void changeView(int id)
    {
        ClientMembership currentClientMembership = clientMemberships.FirstOrDefault(cm => cm.Client_Membership_Id == id);

        if (currentClientMembership != null)
        {
            Membership currentMembershipType = membershipTypes.FirstOrDefault(m => m.Id == currentClientMembership.Membership_Id);
            if (currentClientMembership.First_Usage_Date == new DateTime())
            {
                isFirstUsage = true;
            }
            else
            {
                isFirstUsage = false;
            }

            if (currentMembershipType.Days_available > 0)
            {
                DateTime currentDate = DateTime.Now;
                if (currentDate > currentClientMembership.Available_until)
                {
                    errorText = "This membership is expired.";
                    canEntry = false;
                    return;
                }
                else
                {
                    String available = currentClientMembership.Available_until.ToString();
                    int days = (currentClientMembership.Available_until - DateTime.Now + TimeSpan.FromMinutes(1)).Days;
                    if (days == 2)
                    {
                        errorText = "The membership will be expired in two days.";
                    }
                    availableUntil = $"{available} ({days} days left)";
                }
            }
            else
            {
                availableUntil = "-";
            }

            if (currentMembershipType.Entries_available == 0)
            {
                entriesLeft = "-";
            }
            else
            {
                int entriesLeftTemp = currentMembershipType.Entries_available - currentClientMembership.Entry_Count;
                entriesLeft = entriesLeftTemp.ToString();
                if (entriesLeftTemp == 1)
                {
                    errorText = "Only one entry is left.";
                    return;
                }
                if (entriesLeftTemp == 0)
                {
                    errorText = "This are no entries left.";
                    canEntry = false;
                    return;
                }
            }
        }
    }


    public void entryClient()
    {
        ClientMembership selectedClientMemship = clientMemberships.FirstOrDefault(cm => cm.Client_Membership_Id == selectedClientMembershipId);
        if (isFirstUsage)
        {
            selectedClientMemship.First_Usage_Date = DateTime.Now;
        }
        int entries = selectedClientMemship.Entry_Count + 1;
        selectedClientMemship.Entry_Count = entries;
        clientMembershipService.UpdateClientMembership(selectedClientMemship);

        Entry entry = new Entry();
        entry.Client_Id = client.Client_id;
        entry.Membership_Id = selectedClientMemship.Membership_Id;
        entry.Gym_Id = selectedClientMemship.Gym_Id;
        entry.Bar_code = client.Bar_code;
        entry.Date = DateTime.Now;

        entryService.AddEntry(entry);

        ShowToast(MatToastType.Success, "Success", $"Client entered.");
        NavigationManager.NavigateTo("entries");
    }
    private void ShowToast(MatToastType type, string toastTitle, string toastMessage, string icon = "")
    {
        _toaster.Add(toastMessage, type, toastTitle, icon, config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;
            config.ShowTransitionDuration = 2000;
            config.VisibleStateDuration = 5000;
        });
    }
}
